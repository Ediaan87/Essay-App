app EssayApp {
  wasp: {
    version: "^0.11.0"
  },
  title: "EssayApp",
  client: {
    rootComponent: import { Layout } from "@client/Layout.jsx"
  },
  auth: {
    userEntity: User,
    methods: {
      usernameAndPassword: {}
    },
    onAuthFailedRedirectTo: "/login",
    onAuthSucceededRedirectTo: "/"
  }
}

route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import Login from "@client/pages/auth/Login.jsx"
}
route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import Signup from "@client/pages/auth/Signup.jsx"
}

entity User {=psl
  id Int @id @default(autoincrement())
  username String @unique
  password String
  essays Essay[]
psl=}

entity Essay {=psl
  id Int @id @default(autoincrement())
  title String
  content String
  wordCount Int
  format String
  user User @relation(fields: [userId], references: [id])
  userId Int
psl=}

entity Bibliography {=psl
  id Int @id @default(autoincrement())
  source String
  format String
  essay Essay @relation(fields: [essayId], references: [id])
  essayId Int
psl=}

action createUser {
  fn: import { createUser } from "@server/actions.js",
  entities: [User]
}

action createEssay {
  fn: import { createEssay } from "@server/actions.js",
  entities: [Essay]
}

action createBibliography {
  fn: import { createBibliography } from "@server/actions.js",
  entities: [Bibliography]
}

query getUserEssays {
  fn: import { getUserEssays } from "@server/queries.js",
  entities: [Essay]
}

query getEssayBibliography {
  fn: import { getEssayBibliography } from "@server/queries.js",
  entities: [Bibliography]
}

route DashboardRoute { path: "/", to: DashboardPage }
page DashboardPage {
  component: import { DashboardPage } from "@client/pages/Dashboard.jsx",
  authRequired: true
}

route EssayRoute { path: "/essay/:essayId", to: EssayPage }
page EssayPage {
  component: import { EssayPage } from "@client/pages/Essay.jsx"
}
